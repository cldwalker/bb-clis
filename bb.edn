{:paths ["src"]
 :min-bb-version "0.7.2"
 :tasks
 {:requires ([cldwalker.bb-clis.tasks.util :as tasks-util])

  :enter (let [task-map (current-task)]
           (def ^:dynamic *parsed-args*
             (tasks-util/parse-options task-map))
           (tasks-util/check-for-required-arguments *parsed-args* task-map))

  help
  {:doc "Print a task's help"
   :usage "TASK"
   :requires ([cldwalker.bb-clis.tasks :as tasks])
   :task (tasks/help *command-line-args*)}

  repl
  ;; Couldn't just reference whole task as a map as `bb tasks` failed
  {:doc "Pull up socket repl with #'tasks/result bound to result of given task and args"
   :usage "TASK [& ARGS]"
   :requires ([cldwalker.bb-clis.tasks :as tasks])
   :task (tasks/repl *command-line-args*)}

  every-dir-shell
  {:doc "Run shell command on every dir"
   :requires ([cldwalker.bb-clis.tasks :as tasks])
   :usage "CMD [&ARGS]"
   :options tasks/every-dir-shell-cli-options
   :cli-options [:in-order true]
   :task (tasks/every-dir-shell *parsed-args*)}

  json=
  {:doc "Check equality of given json files"
   :usage "[& FILES]"
   :requires ([cldwalker.bb-clis.tasks :as tasks])
   :task (prn (tasks/json= *command-line-args*))}

  brew-search-info
  {:doc "Runs a brew info on all brew search results"
   :usage "SEARCH"
   :requires ([cldwalker.bb-clis.tasks :as tasks])
   :task (tasks/brew-search-info *command-line-args*)}

  update-gitlib
  {:doc "Update git library sha in deps.edn"
   :extra-deps {borkdude/rewrite-edn {:mvn/version "0.1.0"}}
   :requires ([cldwalker.bb-clis.tasks.rewrite-edn :as rewrite-edn])
   :usage "GITLIB SHA"
   :task (rewrite-edn/update-gitlib *command-line-args*)}

  rdf-data
  {:doc "Fetches rdf contents of a url using rdf-dereference"
   :usage "URL"
   :requires ([cldwalker.bb-clis.tasks.rdf-data :as rdf-data]
              [clojure.pprint :as pprint])
   :options rdf-data/rdf-data-cli-options
   :task (pprint/pprint (rdf-data/rdf-data *command-line-args* (:options *parsed-args*)))}

  clone
  {:doc "Clone a git url"
   :usage "URL"
   :extra-deps {org.clojure/tools.gitlibs {:mvn/version "2.4.172"}}
   :requires ([cldwalker.bb-clis.tasks.git :as git])
   :options git/clone-cli-options
   :task (git/clone *parsed-args*)}

  var-sizes
  {:doc "Print vars with largest LOCs"
   :usage "[& SOURCE-PATHS]"
   :requires ([cldwalker.bb-clis.tasks.clj-kondo :as clj-kondo])
   :task (prn (clj-kondo/var-sizes *command-line-args*))}

  var-meta
  {:doc "Prints var metadata for source-paths. Defaults to src/ for source-paths"
   :usage "[& SOURCE-PATHS]"
   :requires ([cldwalker.bb-clis.tasks.clj-kondo :as clj-kondo])
   :task (prn (clj-kondo/var-meta *command-line-args*))}

  ;; From @borkdude
  http-server
  {:extra-deps {babashka/http-server
                {:git/url "https://github.com/babashka/http-server"
                 :git/sha "d1f01b47492dec245f3f6d297849ee038243ee86"}}
   :doc "Run a basic http server"
   :task babashka.http-server/-main}

  ;; From https://github.com/babashka/tools.namespace#babashka-maintained-fork
  test
  {:extra-paths ["test"
                 ;; This is specific to bb-clis but this task can still be
                 ;; used for any bb repo
                 "test/resources"]
   :extra-deps {io.github.cognitect-labs/test-runner
                {:git/tag "v0.5.0" :git/sha "b3fd0d2"}
                org.clojure/tools.namespace {:git/url "https://github.com/babashka/tools.namespace"
                                             :git/sha "3625153ee66dfcec2ba600851b5b2cbdab8fae6c"}}
   :requires ([cognitect.test-runner :as tr])
   :doc "Run tests with cognitect test runner"
   :task (apply tr/-main "-d" "test" *command-line-args*)}

  ns-in-dir
  {:extra-deps {org.clojure/tools.namespace {:git/url "https://github.com/babashka/tools.namespace"
                                             :git/sha "3625153ee66dfcec2ba600851b5b2cbdab8fae6c"}}
   :requires ([clojure.tools.namespace.find :as find]
              [babashka.fs :as fs])
   :doc "Prints namespaces in dir"
   :usage "DIR"
   :task (prn (apply find/find-namespaces-in-dir (map fs/file *command-line-args*)))}

  var-sexp
  {:requires ([cldwalker.bb-clis.tasks.rewrite-clj :as rewrite-clj])
   :doc "For given file, returns var sexp which is usually its value"
   :usage "VAR FILE"
   :task (prn (rewrite-clj/var-sexp *command-line-args*))}

  do-sh
  cldwalker.bb-clis.tasks/do-sh

  logseq-empty-files
  cldwalker.bb-clis.tasks.logseq/empty-files}}
