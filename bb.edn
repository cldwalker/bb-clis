{:paths ["src"]
 :tasks
 {:requires ([cheshire.core :as json]
             [cldwalker.bb-clis.babashka.task :as task]
             [clojure.edn :as edn]
             [clojure.string :as str])
  :init
  (do
    (defn check-for-required-arguments [parsed-args]
      (let [required-args (->> (str (:usage (current-task)))
                               ((fn [s] (str/split s (re-pattern "\\s+"))))
                               (take-while (fn [s] (re-find (re-pattern "^[A-Z]") s))))
            args (if (= :cldwalker.bb-clis.babashka.task/no-options parsed-args)
                   *command-line-args* (:arguments parsed-args))]
        (when (< (count args) (count required-args))
          (println "Wrong number of arguments given.")
          (println (format "Usage: bb %s %s%s"
                           (:name (current-task))
                           (:usage (current-task))
                           (if-let [summary (:summary parsed-args)]
                             (str "\nOptions:\n" summary)
                             "")))
          (System/exit 1))))
    )

  :enter (do
           (def ^:dynamic *parsed-args*
             (task/parse-options))
           (check-for-required-arguments *parsed-args*))

  help
  {:doc "Print a task's help"
   :usage "TASK"
   ;; Would rather not dip into bb's internals to determine tasks
   :task (let [tasks (-> (or (System/getenv "BABASHKA_EDN") "bb.edn")
                         slurp
                         edn/read-string
                         :tasks)
               task (first *command-line-args*)]
           (if-let [task-map (get tasks (symbol task))]
             (println (format "%s\n\nUsage: bb %s%s"
                              (:doc task-map)
                              task
                              (if-let [usage (:usage task-map)]
                                (str " " usage)
                                "")))
             (do
               (println "Error: No such task exists")
               (System/exit 1))))}

  repl
  ;; Couldn't just reference task/repl-task here as `bb tasks` failed
  {:doc "Pull up socket repl with #'task/result bound to result of given task and args"
   :usage "TASK [& ARGS]"
   :task ((:task-fn task/repl-task))}

  every-dir-shell
  {:doc "Run shell command on every dir"
   :requires ([babashka.fs :as fs])
   :usage "CMD [&ARGS]"
   :options [["-d" "--directory DIR" "Directories"
              :id :directories
              :default-fn (fn [_x] [(System/getenv "PWD")])
              :validate [fs/directory? "Must be a directory"]
              :multi true
              :update-fn conj]]
   :cli-options [:in-order true]
   :task (let [{:keys [options arguments]} *parsed-args*
               args (str/join " " arguments)]
           (doseq [dir (:directories options)]
             (println "=== Directory -" dir "===")
             (shell {:dir dir} args)
             (println "")))}

  json=
  ;; Useful when diff fails you do to random sort of json files produced differently
  {:doc "Check equality of given json files"
   :usage "[& FILES]"
   :task (prn (apply = (map (fn [x] (-> x slurp json/parse-string)) *command-line-args*)))}
  brew-search-info
  {:doc "Runs a brew info on all brew search results"
   :usage "SEARCH"
   :task (let [results (-> (shell {:out :string}
                                  (str/join " " (into ["brew" "search"]
                                                      *command-line-args*)))
                           :out
                           str/split-lines)
               brew-packages (remove (fn [x] (re-find (re-pattern "(Casks|Formulae)$") x)) results)]
           (shell (str "brew info " (str/join " " brew-packages))))}

  update-gitlib
  {:doc "Update git library sha in deps.edn"
   :extra-deps {borkdude/rewrite-edn {:mvn/version "0.0.2"}}
   :requires ([borkdude.rewrite-edn :as r])
   :usage "GITLIB SHA"
   :task (let [[gitlib sha] *command-line-args*
               nodes (-> "deps.edn" slurp r/parse-string)]
           (spit "deps.edn"
                 (str (r/assoc-in nodes [:deps (symbol gitlib) :sha] sha))))}

  rdf-data
  {:doc "Fetches rdf contents of a url using rdf-dereference"
   :usage "URL"
   :requires ([clojure.pprint :as pprint])
   :options [["-a" "--all" "Prints all data, not just schema.org predicates with graph and subject filtered out"]]
   :task (let [options (:options *parsed-args*)
               rdf-data (:out (shell {:out :string} (str "rdf-dereference " (first *command-line-args*))))
               filter-fn (if (:all options)
                           (constantly true)
                           (fn [{:keys [predicate]}]
                             (or (str/includes? predicate "schema.org")
                                 ;; Next two are useful on github
                                 (str/includes? predicate "ogp.me")
                                 (= "http://www.w3.org/1999/02/22-rdf-syntax-ns#type" predicate))))
               map-fn (if (:all options) identity (fn [m] (dissoc m :subject :graph)))
               result (map map-fn
                           (filter filter-fn (json/parse-string rdf-data true)))]
           (pprint/pprint result))}}}
