{:tasks
 {:requires ([cheshire.core :as json]
             [cldwalker.babashka.util :as util]
             [clojure.edn :as edn]
             [clojure.string :as str])
  help
  {:doc "Print a task's help"
   :usage "TASK"
   ;; Would rather not dip into bb's internals to determine tasks
   :task (let [tasks (-> (or (System/getenv "BABASHKA_EDN") "bb.edn")
                         slurp
                         edn/read-string
                         :tasks)
               task (first *command-line-args*)]
           (if-let [task-map (get tasks (symbol task))]
             (println (format "%s\n\nUsage: bb %s%s"
                              (:doc task-map)
                              task
                              (if-let [usage (:usage task-map)]
                                (str " " usage)
                                "")))
             (do
               (println "Error: No such task exists")
               (System/exit 1))))}
  json=
  ;; Useful when diff fails you do to random sort of json files produced differently
  {:doc "Check equality of given json files"
   :usage "[& FILES]"
   :task (prn (apply = (map (fn [x] (-> x slurp json/parse-string)) *command-line-args*)))}
  brew-search-info
  {:doc "Runs a brew info on all brew search results"
   :usage "SEARCH"
   :task (let [results (-> (shell {:out :string}
                                  (str/join " " (into ["brew" "search"]
                                                      *command-line-args*)))
                           :out
                           str/split-lines)
               brew-packages (remove (fn [x] (re-find (re-pattern "(Casks|Formulae)$") x)) results)]
           (shell (str "brew info " (str/join " " brew-packages))))}

  update-gitlib
  {:doc "Update git library sha in deps.edn"
   :extra-deps {borkdude/rewrite-edn {:mvn/version "0.0.2"}}
   :requires ([borkdude.rewrite-edn :as r])
   :usage "GITLIB SHA"
   :task (let [[gitlib sha] *command-line-args*
               nodes (-> "deps.edn" slurp r/parse-string)]
           (spit "deps.edn"
                 (str (r/assoc-in nodes [:deps (symbol gitlib) :sha] sha))))}}}
