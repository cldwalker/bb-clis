#!/usr/bin/env bb
; vim: set filetype=clojure:

(deps/add-deps '{:deps {io.github.cldwalker/bb-clis {:git/sha "c5da64153fb29e2f3fa807df4228b6e434f00fcd"}}})
; (deps/add-deps {:deps {'io.github.cldwalker/bb-clis {:local/root (str (fs/parent (fs/parent *file*)))}}})

(ns bb-github-pr-for-commit
  (:require [babashka.curl :as curl]
            [cheshire.core :as json]
            [cldwalker.bb-clis.cli :as cli]
            [cldwalker.bb-clis.cli.misc :as misc]))

(defn- fetch-response* [commit {:keys [repository token user]}]
  (try
    (curl/get (format "https://api.github.com/repos/%s/commits/%s/pulls"
                      repository commit)
              ;; Check https://developer.github.com/v3/repos/commits/#list-pull-requests-associated-with-commit to see if this is still in preview
              (cond-> {:headers {"Accept" "application/vnd.github.groot-preview+json"}}
                      (and user token) (assoc :basic-auth [user token])))
    (catch clojure.lang.ExceptionInfo e
      (cli/error "Failed to fetch github information" (pr-str {:error (ex-message e)})))))

(defn- fetch-response [commit options]
  (let [{:keys [body]} (fetch-response* commit options)
        repos (json/parse-string body true)]
    (if-let [url (if (= 1 (count repos))
                   (-> repos first :html_url)
                   (let [repos' (remove #(get-in % [:base :repo :fork]) repos)]
                     (prn :URLS (map :html_url repos'))
                     (->> repos' (filter :merged_at) first :html_url)))]
      (do (misc/open-url url)
          url)
      (cli/error "No github PR found for this commit"))))

(defn -main [{:keys [options arguments summary]}]
  (when (:debug options) (println "Options:" options))
  (if (or (:help options) (empty? arguments))
    (cli/print-summary " COMMIT" summary)
    (fetch-response (first arguments) options)))

(def cli-options
  ;; An option with a required argument
  [["-r" "--repository REPO"
    :default-fn misc/find-current-user-repo
    :default-desc "Current directory's repository"
    :validate [#(re-find #"\S+/\S+" %) "Must contain a '/'"]]
   ["-d" "--debug"]
   ["-u" "--user USER"
    :default-fn (fn [_x] (System/getenv "GITHUB_USER"))
    :default-desc "$GITHUB_USER"]
   ["-t" "--token TOKEN"
    :default-fn (fn [_x] (System/getenv "GITHUB_OAUTH_TOKEN"))
    :default-desc "$GITHUB_OAUTH_TOKEN"]
   ["-h" "--help"]])

(cli/run-command -main *command-line-args* cli-options)
