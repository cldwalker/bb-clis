#!/usr/bin/env bb
;; vim: set filetype=clojure:
;; Usage
;; =====
;; Run aws commands the same way the awscli does e.g.
;; - bb-aws s3api list-buckets
;; - bb-aws s3api get-bucket-acl --bucket X
;; Note: Does not support commands with non-option arguments e.g.
;;   bb-aws lambda invoke --function-name FN OUT_FILE
;; Drop into a repl with command's result stored in #'result
;; - bb-aws --repl s3api list-buckets

(deps/add-deps '{:deps {io.github.cldwalker/bb-clis {:git/sha "c5da64153fb29e2f3fa807df4228b6e434f00fcd"}}})
; (deps/add-deps {:deps {'io.github.cldwalker/bb-clis {:local/root (str (fs/parent (fs/parent *file*)))}}})

(ns bb-aws
  {:clj-kondo/config
  '{:linters {:inline-def {:level :off}}}}
  (:require [babashka.pods :as pods]
            [cldwalker.bb-clis.util.associative :as a]
            [cldwalker.bb-clis.cli :as cli]
            [clojure.string :as str]
            [clojure.main :as main]
            [clojure.pprint :as pprint]))

(pods/load-pod 'org.babashka/aws "0.0.6")
(require '[pod.babashka.aws :as aws])

(defn- clojure-case->camel-case
  [s]
  (->> (str/split s #"-")
       (map str/capitalize)
       str/join))

(def aws-command->aws-api-api
  {:s3api :s3})

(defn- parse-options-and-args [all-args]
  (loop [options {}
         args all-args]
    (if (some-> (first args) (str/starts-with? "--"))
      (recur (assoc options
                    (str/replace-first (first args) #"^--" "") (second args))
        (drop 2 args))
      [options args])))

(defn invoke-aws-operation [[cmd subcmd & args] {:keys [region debug]}]
  (let [api (aws-command->aws-api-api (keyword cmd) (keyword cmd))
        op (keyword (clojure-case->camel-case subcmd))
        client (aws/client {:api api :region region})
        [options _] (parse-options-and-args args)
        request (a/map-keys #(-> %
                                 clojure-case->camel-case
                                 (str/replace-first #"[A-Z]" str/lower-case)
                                 keyword)
                            options)]
    (when debug
      (println "API:" api)
      (println "OP:" op)
      (println "REQUEST:" request))
    (try (aws/invoke client {:op op :request request})
      ;; Noisy failure if the wrong number of args given
      ;; See https://github.com/babashka/pod-babashka-aws/blob/d7c4306bdd74ecde16ee3766825b71facb325588/src/pod/babashka/aws.clj#L120-L123 for noise.
      ;; TODO: Actually catch the noisy failure
      (catch Throwable e
        (println "\nError: Unexpected failure occurred. See error message above.")
        (when debug (println "Exception:" e))))))

(defn- auto-result [result subcmd]
  (cond
    ;; e.g. aws ecr describe-repositores
    (and (map? result) (= 1 (count result)))
    (-> result vals first)
    ;; e.g. aws s3 list-buckets
    (let [kw (some-> (str/split subcmd #"-")
                     last
                     str/capitalize
                     keyword)]
      (contains? result kw))
    (result (some-> (str/split subcmd #"-")
                    last
                    str/capitalize
                    keyword))
    :else
    result))

(def cli-options
  [["-h" "--help"]
   ["-d" "--debug"]
   ["-R" "--repl" "Drop into repl with operation result set to #'result"]
   ["-a" "--auto-result" "Drills into result one level if main entity to list is detected"]
   ["-r" "--region REGION"
    :default-desc "$AWS_REGION or us-east-2"
    :default-fn (fn [_] (or (System/getenv "AWS_REGION") "us-east-2"))]])

(defn -main [{:keys [summary arguments options]}]
  (if (or (:help options) (zero? (count arguments)))
    (cli/print-summary " COMMAND SUBCOMMAND [SUBCOMMAND-OPTIONS]" summary)
    (let [result (invoke-aws-operation arguments options)
          result_ (if (:auto-result options)
                    (auto-result result (second arguments))
                    result)]
      (pprint/pprint result_)
      (when (:repl options)
        (def result result_)
        (main/repl)))))

(when (= *file* (System/getProperty "babashka.file"))
  (cli/run-command -main *command-line-args* cli-options :in-order true))

(comment
 (def s3-client (aws/client {:api :s3 :region "us-east-1"}))
 (aws/doc s3-client :ListBuckets)
 (aws/invoke s3-client {:op :ListBuckets})
 )
