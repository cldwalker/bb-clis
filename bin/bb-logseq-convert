#!/usr/bin/env bb
; vim: set filetype=clojure:
; Converts a url into a set of markdown properties for use
; as a multi-line logseq block

(ns bb-logseq-convert
  (:require [cldwalker.bb-clis.cli :as cli]
            [cldwalker.bb-clis.cli.logseq :as logseq]
            [clojure.string :as str]
            [cheshire.core :as json]
            [babashka.tasks :refer [shell]])
  (:import (java.net URL)))

;; TODO: Move to a file
(def host-properties-config
  {"github.com"
   #{"http://www.w3.org/1999/02/22-rdf-syntax-ns#type"
     "http://ogp.me/ns#description"
     "http://schema.org/name"}})

;; TODO: Move to a file
(def url->name-config
  {"http://www.w3.org/1999/02/22-rdf-syntax-ns#type" "type"
   "http://ogp.me/ns#description" "desc"
   "http://schema.org/name" "name"})

(defn translate-triple
  [{:keys [predicate object]}]
  (let [property-name (or (get url->name-config predicate)
                          (throw (ex-info "Can't translate url to logseq property" {:url predicate})))
        value (case predicate
                "http://schema.org/name"
                (->> object (re-matches #"\"\s*(\S+)\s*\"") second)
                "http://ogp.me/ns#description"
                (->> object (re-matches #"\"\s*(.*)\s*\"@\w+") second)
                object)]
    [property-name value]))

(defn- url->properties [url-obj]
  (let [triples (-> (shell {:out :string} "rdf-dereference" (str url-obj))
                    :out
                    (json/parse-string true))
        host (.getHost url-obj)
        properties-to-keep (get host-properties-config host
                                #{"http://www.w3.org/1999/02/22-rdf-syntax-ns#type"})
        properties (->> triples
                        (filter #(contains? properties-to-keep (:predicate %)))
                        (map translate-triple)
                        (into {}))]
    properties))

(defn- ->url-object [url]
  (try (URL. url)
    (catch Exception _ nil)))

(defn- create-block [arguments _]
  (let [url (if (seq arguments)
              (str/join " " arguments)
              (:out (shell {:out :string} "pbpaste")))
        url-obj (or (->url-object url)
                    (cli/error "The following is not a url -" (pr-str url)))
        properties (merge {"desc" "" "url" (str url-obj)}
                          (url->properties url-obj))
        properties-vec (mapv (juxt identity properties)
                             ["url" "type" "name" "desc"])
        block-text (logseq/properties->block properties-vec)]
    (shell {:in block-text} "pbcopy")
    (println block-text)))

(defn -main [{:keys [options arguments summary]}]
  (if (:help options)
    (cli/print-summary " [& LOGSEQ_TEXT]" summary)
    (create-block arguments options)))

(def cli-options
  [["-h" "--help"]])

(when (= *file* (System/getProperty "babashka.file"))
  (cli/run-command -main *command-line-args* cli-options))
