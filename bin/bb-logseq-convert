#!/usr/bin/env bb
; vim: set filetype=clojure:
; Converts a url into a set of markdown properties for use
; as a multi-line logseq block

;; Setup: npm install -g rdf-dereference

(ns bb-logseq-convert
  (:require [cldwalker.bb-clis.cli :as cli]
            [cldwalker.bb-clis.cli.logseq :as logseq]
            [clojure.string :as str]
            [clojure.edn :as edn]
            [clojure.java.io :as io]
            [cheshire.core :as json]
            [babashka.process :as process]
            [babashka.tasks :refer [shell]])
  (:import (java.net URL)))

;; Config
;; ======
(def default-config
  ;; Configures what properties a given host keeps to be converted to a block.
  {:host-properties {}
   ;; Maps property urls that have text values to their names in logseq
   ;; This also translates property values to normal strings by stripping them
   ;; of quotes and other suffix info e.g. "foo"@en -> foo
   :text-properties {}})

;; May need to move this to shared ns
(defn- read-config []
  (let [config-file (io/file (System/getenv "HOME") ".bb-logseq" "config.edn")]
    (if (.exists config-file)
      (edn/read-string (slurp (str config-file)))
      default-config)))

(defn- read-entities-config
  "This is a map of urls to names. Entities are logseq pages or blocks that have
  url attributes.

This is a separate file as it is expected to be autogenerated by a script e.g. a
process that generates this map from your logseq data"
  []
  (let [config-file (io/file (System/getenv "HOME") ".bb-logseq" "entities.edn")]
    (if (.exists config-file)
      (edn/read-string (slurp (str config-file)))
      {})))

;; General util
;; ============
(defn- ->url-object [url]
  (try (URL. url)
    (catch Exception _ nil)))

(defn- process-by-timeout-or-exit
  "Runs cmd for timeout ms but exits CLI early if timeout is reached. Returns
  cmd output as string"
  [cmd timeout]
  (let [ret (deref (:out (process/process cmd {:out :string})) timeout ::timeout)]
    (if (= ret ::timeout)
      (cli/error (str "Timed out while running cmd: " cmd))
      ret)))

;; Main CLI
;; ========
(defn- translate-triple
  [{:keys [predicate object]} {:keys [text-property-urls url-to-name]}]
  (let [property-name (or (url-to-name predicate)
                          (throw (ex-info "Can't translate url to logseq property" {:url predicate})))
        value (if (contains? text-property-urls predicate)
                (->> object (re-find #"^\"\s*(.*)\s*\"") second)
                object)
        value_ (if (->url-object value)
                 (or (url-to-name value)
                     ;; For cases like http://schema.org/Person with https://gist.github.com/borkdude
                     (url-to-name (str/replace-first value "http://" "https://"))
                     value)
                 value)]
    [property-name value_]))

(defn- build-dynamic-config
  [{:keys [text-properties entities]}]
  {:text-property-urls
   (set (keys text-properties))
   :url-to-name
   (merge
    text-properties
    entities
    ;; Not configurable for now as type is pretty critical to how all this
    ;; rdf data is converted
    {"http://www.w3.org/1999/02/22-rdf-syntax-ns#type" "type"})})

(defn- url->properties [url-obj config {:keys [debug]}]
  (let [dynamic-config (build-dynamic-config config)
        triples (-> ["rdf-dereference" (str url-obj)]
                    ;; Need a timeout as rdf-dereference has been wierdly timing
                    ;; out for imdb and wikipedia
                    (process-by-timeout-or-exit 3000)
                    (json/parse-string true))
        host (str/replace-first (.getHost url-obj) #"^www\." "")
        _ (when debug (println "[DEBUG] Host: " host))
        properties-to-keep (get-in config [:host-properties host]
                                   #{"http://www.w3.org/1999/02/22-rdf-syntax-ns#type"})
        _ (when debug (println "[DEBUG] Properties: " properties-to-keep))
        properties (->> triples
                        (filter #(contains? properties-to-keep (:predicate %)))
                        (map #(translate-triple % dynamic-config))
                        (into {}))]
    properties))

(defn- create-block [arguments options]
  (let [entities (read-entities-config)
        config (assoc (read-config)
                      :entities entities)
        url (if (seq arguments)
              (str/join " " arguments)
              (:out (shell {:out :string} "pbpaste")))
        url-obj (or (->url-object url)
                    (cli/error "The following is not a url -" (pr-str url)))
        properties (merge {"desc" "" "url" (str url-obj)}
                          (url->properties url-obj config options))
        properties-coll (keep #(when-let [val (properties %)] [% val])
                              ["url" "type" "name" "desc"])
        block-text (logseq/properties->block properties-coll)]
    (shell {:in block-text} "pbcopy")
    (println block-text)))

(defn -main [{:keys [options arguments summary]}]
  (if (:help options)
    (cli/print-summary " [& LOGSEQ_TEXT]" summary)
    (create-block arguments options)))

(def cli-options
  [["-h" "--help"]
   ["-d" "--debug"]])

(when (= *file* (System/getProperty "babashka.file"))
  (cli/run-command -main *command-line-args* cli-options))
