#!/usr/bin/env bb
; vim: set filetype=clojure:
; Converts a url into a set of markdown properties for use
; as a multi-line logseq block

(ns bb-logseq-convert
  (:require [cldwalker.bb-clis.cli :as cli]
            [cldwalker.bb-clis.cli.logseq :as logseq]
            [clojure.string :as str]
            [babashka.tasks :refer [shell]])
  (:import (java.net URL)))

;; TODO: Move to a config file
(def url-config
  [["github.com\\/[^\\/]+\\/([^\\/]+)" "repo"]])

(defn- extract-type [url url-config]
  (some (fn [[regex-str type_]]
          (when (re-find (re-pattern regex-str) url)
            type_))
        url-config))

(defn- extract-name [url url-config]
  (some (fn [[regex-str _]]
          (second (re-find (re-pattern regex-str) url)))
        url-config))

(defn- url->properties [url]
  (let [type_ (extract-type url url-config)
        name_ (extract-name url url-config)]
    (cond-> {:url url}
            type_ (assoc :type type_)
            name_ (assoc :name name_))))

(defn- ->url-object [url]
  (try (URL. url)
    (catch Exception _ nil)))

(defn- create-block [arguments _]
  (let [url (if (seq arguments)
              (str/join " " arguments)
              (:out (shell {:out :string} "pbpaste")))
        _ (when-not (->url-object url)
            (cli/error "The following is not a url -" (pr-str url)))
        properties (url->properties url)
        properties-vec (conj (mapv (juxt name properties)
                                   [:type :name :url])
                             ["desc" ""])
        block-text (logseq/properties->block properties-vec)]
    (shell {:in block-text} "pbcopy")
    (println block-text)))

(defn -main [{:keys [options arguments summary]}]
  (if (:help options)
    (cli/print-summary " [& LOGSEQ_TEXT]" summary)
    (create-block arguments options)))

(def cli-options
  [["-h" "--help"]])

(when (= *file* (System/getProperty "babashka.file"))
  (cli/run-command -main *command-line-args* cli-options))
