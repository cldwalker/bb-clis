#!/usr/bin/env bb
;; vim: set filetype=clojure:
;; Prints an ascii table for streamed in edn or edn file
;; Edn must be a map or a collection of collections

(ns bb-table
  (:require [clojure.pprint :as pprint]
            [clojure.edn :as edn]
            [clojure.string :as string]
            [cldwalker.babashka.util :as util]
            [cldwalker.babashka.util.associative :as a]))

(defn- get-columns
  "Extract columns from rows. Defaults to searching across all rows"
  [rows]
  (distinct (mapcat identity (map keys rows))))

(defn- selected-columns-int
  [columns columns-filter]
  (let [selected (mapv #(Integer/parseInt %)
                      (string/split columns-filter #"\s*,\s*"))]
    (mapv #(nth columns (dec %)) selected)))

(defn- selected-columns-str
  [columns columns-filter]
  (->> (string/split columns-filter #"\s*,\s*")
       (map #(filter (fn [c] (string/starts-with? (name c) %)) columns))
       (apply concat)))

(defn- selected-columns
  [columns columns-filter]
  (if (re-find #"^\d" columns-filter)
    (selected-columns-int columns columns-filter)
    (selected-columns-str columns columns-filter)))

(defn- print-table
  [columns rows]
  (if-let [table-var (try (require 'table.core) (ns-resolve (find-ns 'table.core) 'table)
                       (catch Exception))]
    ((deref table-var) rows :fields columns)
    (pprint/print-table columns rows)))

(defn- print-rows* [rows {:keys [columns-filter]}]
  (if (and (coll? rows) (-> rows first map?))
    (let [columns (get-columns rows)
          columns_ (if columns-filter
                    (selected-columns columns columns-filter)
                    columns)]
      (print-table columns_ rows))
    (do
      (println "Error: Input is not an EDN collection of maps")
      (System/exit 1))))

(defn get-sort-key [rows query]
  (let [columns (get-columns rows)]
    (or (first (selected-columns-str columns query))
        ;; Since no matches, auto-try keyword
        (first (selected-columns-str columns (keyword query)))
        query)))

(defn- possibly-sort-rows [rows sort reverse-sort]
  (cond
    sort
    (let [sort-key (get-sort-key rows sort)]
      (sort-by #(get % sort-key) rows))

    reverse-sort
    (let [sort-key (get-sort-key rows reverse-sort)]
      (sort-by #(get % sort-key)
               ;; Handles int and string
               #(compare %2 %1)
               rows))

    :else rows))

(defn- format-width [string width]
  (if (zero? width)
    ""
    (format
     (str "%-" width "." width "s")
     (if (> (count string) width)
       (str (.substring string 0 (- width 3)) "...")
       string))))

(defn- process-rows
  "Currently processes all row values even when we know certain columns are selected.
Future improvement would be to only operate on selected column values"
  [rows {:keys [sort reverse-sort shorten]}]
  (cond->> (possibly-sort-rows rows sort reverse-sort)
           shorten (mapv (fn [row] (a/map-vals
                                    #(if (string? %)
                                       (format-width % shorten)
                                       (format-width (pr-str %) shorten))
                                    row)))))
(defn- printing-headers [rows]
  (let [columns (get-columns rows)
        column-counts (->> rows
                           (map #(zipmap (keys %) (repeat 1)))
                           (apply merge-with +))]
    (mapv (fn [num col]
            {:num num :column col :count (column-counts col 0)})
          (range 1 (inc (count columns))) columns)))

(defn print-rows [arg {:keys [print-headers] :as options}]
  (let [arg_ (if print-headers
               (printing-headers arg)
               arg)
        rows (cond
               (map? arg_) (map (fn [[k v]] {"key" k "value" v}) arg_)

               ((some-fn vector? list? set?) (first arg_))
               (map (fn [coll] (zipmap (range) coll)) arg_)

               :else arg_)
        processed-rows (process-rows rows options)]
    (print-rows* processed-rows options)))

(defn -main [{:keys [summary _arguments options]}]
  (cond
    (:help options) (util/print-summary "\nReads from stdin if no arguments given" summary)
    (:file options) (print-rows (-> (:file options) slurp edn/read-string)
                                options)
    :else           (print-rows (first (util/read-stdin-edn))
                                options)))

(def cli-options
  [["-h" "--help"]
   ["-f" "--file FILE"]
   ["-c" "--columns-filter FILTER" "Select columns by comma delimited substring matches or numbers from -H"]
   ["-H" "--print-headers" "Only print column headers"]
   ;; Sort and reverse sort don't handle keywords yet
   ["-s" "--sort COLUMN" "Sort by column"]
   ["-r" "--reverse-sort COLUMN" "Reverse sort by column"]
   ["-S" "--shorten WIDTH" "Shortens all column value widths by WIDTH char"
    :parse-fn #(Integer/parseInt %)]])

(util/run-command -main *command-line-args* cli-options)
