#!/usr/bin/env bb
; vim: set filetype=clojure:
; Light-weight alternative to sed or perl -i. Aims to provide replacements
; that are more readable by supporting named replacements.
; See get-replacements for config docs

(deps/add-deps '{:deps {io.github.cldwalker/bb-clis {:git/sha "c5da64153fb29e2f3fa807df4228b6e434f00fcd"}}})
; (deps/add-deps {:deps {'io.github.cldwalker/bb-clis {:local/root (str (fs/parent (fs/parent *file*)))}}})

(ns bb-replace
  (:require [clojure.string :as str]
            [clojure.java.io :as io]
            [clojure.edn :as edn]
            [cldwalker.bb-clis.cli :as cli]))

(defn- get-replacements
  "Reads replacements from ./bb-replace.edn and ~/.bb-replace.edn.
A replacement consists of three keys:
* :regex : re-pattern regex to match target substring using clojure.string/replace-first
* :format-string - clojure.core/format generates the replacement string using this format and
  commandline arguments
* :file - File on which to do replacement"
  []
  (cond->> []
           (.exists (io/file (System/getenv "HOME") ".bb-replace.edn"))
           (into
            [(edn/read-string (slurp (io/file (System/getenv "HOME") ".bb-replace.edn")))])

           (.exists (io/file ".bb-replace.edn"))
           (into [(edn/read-string (slurp ".bb-replace.edn"))])

           true (mapv (fn [m] (update-vals m #(update % :regex re-pattern))))
           true (apply merge)))

(defn- update-file-with-replacement
  [{:keys [regex file format-string]} arguments]
  (let [body (slurp file)
        new-body (str/replace-first body regex
                                    (apply format format-string arguments))]
    (if (= body new-body)
      (cli/error (str "Replacement did not change " file))
      (spit file new-body))))

(defn- arg->replacement [arg options]
  (if-let [replacement (get (get-replacements) (keyword arg))]
    replacement
    (if-let [file (:file options)]
      {:regex (re-pattern arg)
       ;; Not sure if this is a sensible default
       :format-string "$1 %s"
       :file file}
      (cli/error "File option required if providing a regex as a replacement"))))

(def cli-options
  [["-h" "--help"]
   ["-f" "--file FILE" "Overrides default file for a replacement"]
   ["-F" "--format-string FORMAT" "Overrides default format string for a replacement"]])

(defn -main [{:keys [options arguments summary]}]
  (if (or (:help options) (zero? (count arguments)))
    (cli/print-summary (str " REPLACEMENT/REGEX [& ARGUMENTS]\nReplacements available: "
                             (str/join ", " (->> (get-replacements) keys (map name))))
                        summary)
    (let [replacement (arg->replacement (first arguments) options)]
      (update-file-with-replacement (merge replacement
                                          (select-keys options [:file :format-string]))
                                    (rest arguments)))))

(cli/run-command -main *command-line-args* cli-options)
