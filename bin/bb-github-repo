#!/usr/bin/env bb
; Opens urls related to current or specified github repository
; vim: set filetype=clojure:

(ns bb-github-repo
  (:require [cldwalker.bb-clis.util :as util]
            [clojure.string :as str]
            [clojure.java.io :as io]
            [clojure.java.shell :as shell]))

(defn- find-current-branch []
  (if-let [branch (->> (shell/sh "git" "branch")
                       :out
                       str/split-lines
                       (filter #(str/starts-with? % "*"))
                       first
                       (re-find #"\S+$"))]
    branch
    (util/error "Unable to detect current tree")))

(defn- get-relative-git-root-path
  "Given a path, return its path relative to git root"
  [path]
  (let [top-level-dir (-> (shell/sh "git" "rev-parse" "--show-toplevel")
                          :out
                          str/trimr
                          (str "/"))
        full-path (.getAbsolutePath (io/file path))
        git-relative-path (str/replace-first full-path top-level-dir "")]
    git-relative-path))

(defn- open-github-url [{:keys [repository commit tree file]}]
  (let [url-base (str "https://github.com/" repository)
        url (cond
              commit (str url-base "/commit/" commit)
              tree   (str url-base "/tree/" (find-current-branch))
              file   (str url-base "/blob/" (find-current-branch)
                          "/" (get-relative-git-root-path file))

              :else url-base)]
    (doto url util/open-url)))

(defn- open-circleci-url [{:keys [repository]}]
  (let [url (format "https://circleci.com/gh/%s/tree/%s"
                    repository
                    (find-current-branch))]
    (doto url util/open-url)))

(defn -main [{:keys [options _arguments summary]}]
  (cond
    (:help options) (util/print-summary "" summary)
    (:circleci options) (open-circleci-url options)
    :else (open-github-url options)))

(def cli-options
  [["-r" "--repository REPO"
    :default-fn util/find-current-user-repo
    :default-desc "Current directory's repository"
    :validate [#(re-find #"\S+/\S+" %) "Must contain a '/'"]]
   ["-c" "--commit COMMIT" "Opens specified commit"]
   ["-C" "--circleci" "Opens current branch on circleci"]
   ["-t" "--tree" "Opens current branch on github"]
   ["-f" "--file FILE" "Opens file in current branch on github"]
   ["-h" "--help"]])

(util/run-command -main *command-line-args* cli-options)
