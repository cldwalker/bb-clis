#!/usr/bin/env bb
;; vim: set filetype=clojure:
;; Prints an ascii table for streamed in edn or edn file
;; Edn must be a map or a collection of collections

(ns clj-table
  (:require [clojure.pprint :as pprint]
            [clojure.edn :as edn]
            [clojure.string :as string]
            [cldwalker.babashka.util :as util]))

(defn- get-columns
  "Extract columns from rows. Defaults to searching across all rows"
  [rows]
  (distinct (mapcat identity (map keys rows))))

(defn- selected-columns-int
  [columns columns-filter]
  (let [selected (mapv #(Integer/parseInt %)
                      (string/split columns-filter #"\s*,\s*"))]
    (mapv #(nth columns (dec %)) selected)))

(defn- selected-columns-str
  [columns columns-filter]
  (->> (string/split columns-filter #"\s*,\s*")
       (map #(filter (fn [c] (string/starts-with? (name c) %)) columns))
       (apply concat)))

(defn- selected-columns
  [columns columns-filter]
  (if (re-find #"^\d" columns-filter)
    (selected-columns-int columns columns-filter)
    (selected-columns-str columns columns-filter)))

(defn- print-rows* [rows {:keys [columns-filter]}]
  (if (and (coll? rows) (-> rows first map?))
    (let [columns (get-columns rows)
          columns_ (if columns-filter
                    (selected-columns columns columns-filter)
                    columns)]
      (pprint/print-table columns_ rows))
    (do
      (println "Error: Input is not an EDN collection of maps")
      (System/exit 1))))

(defn- possibly-sort-rows [rows sort reverse-sort]
  (cond
    sort (sort-by #(get % sort) rows)
    reverse-sort (sort-by #(get % reverse-sort)
                          ;; Handles int and string
                          #(compare %2 %1)
                          rows)
    :else rows))

(defn print-rows [arg {:keys [sort reverse-sort print-headers] :as options}]
  (let [arg_ (if print-headers
              (let [columns (get-columns arg)]
                (mapv vector (range 1 (inc (count columns))) columns))
              arg)
        rows (cond
               (map? arg_) (map (fn [[k v]] {"key" k "value" v}) arg_)

               ((some-fn vector? list? set?) (first arg_))
               (map (fn [coll] (zipmap (range) coll)) arg_)

               :else arg_)
        processed-rows (possibly-sort-rows rows sort reverse-sort)]
    (print-rows* processed-rows options)))

(defn -main [{:keys [summary _arguments options]}]
  (cond
    (:help options) (util/print-summary "\nReads from stdin if no arguments given" summary)
    (:file options) (print-rows (-> (:file options) slurp edn/read-string)
                                options)
    :else           (print-rows (first (util/read-stdin-edn))
                                options)))

(def cli-options
  [["-h" "--help"]
   ["-f" "--file FILE"]
   ["-c" "--columns-filter FILTER" "Select columns by comma delimited substring matches or numbers from -H"]
   ["-H" "--print-headers" "Only print column headers"]
   ;; Sort and reverse sort don't handle keywords yet
   ["-s" "--sort COLUMN" "Sort by column"]
   ["-r" "--reverse-sort COLUMN" "Reverse sort by column"]])

(util/run-command -main *command-line-args* cli-options)
