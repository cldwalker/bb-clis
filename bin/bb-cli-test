#!/usr/bin/env bb
;; vim: set filetype=clojure:

(ns bb-cli-test
  (:require [clojure.string :as str]
            [clojure.java.shell :as shell]
            [clojure.pprint :as pprint]
            [clojure.java.io :as io]
            [cldwalker.bb-clis.util :as util]))

(def default-test-format
    "(deftest %s
  (let [cmd-results (shell/sh %s)
        expected-results (-> (io/resource \"%s\")
                             slurp
                             edn/read-string)]
    (is (= (:exit expected-results) (:exit cmd-results)))
    (is (= (:out expected-results) (:out cmd-results)))
    (is (= (:err expected-results) (:err cmd-results)))))
")

(defn- generate-test [test-name fixture-file cmd-vec]
  (format default-test-format
          test-name
          (str/join " " (mapv #(str "\"" % "\"") cmd-vec))
          fixture-file))

(defn- record-test
  "Records test by running the given command and args and saving its output to a
  fixture file. If command and args is a single argument containing whitespace,
  the string is automatically wrapped in `bash -c`. This is useful for testing
  multiple commands e.g. `cat foo.edn | baz`."
  [cmd-and-args {:keys [test file verbose]}]
  (assert (and test file) "--test and --file are required options")
  (let [fixture-file (-> file
                         (str/replace-first #"^test/"  "test/resources/")
                         (str/replace-first #"\.clj$" (str "/" test ".edn")))
        ;; Wrap in bash if multiple commands
        cmd-and-args_ (if (and (= 1 (count cmd-and-args))
                               (str/includes? (first cmd-and-args) " "))
                        (concat ["bash" "-c"] cmd-and-args)
                        cmd-and-args)
        cmd-output (apply shell/sh cmd-and-args_)]
    (when verbose
      (println "Ran command:" cmd-and-args "\nSTDOUT:")
      (println (:out cmd-output)))
    (when-not (-> fixture-file io/file .getParentFile .exists)
      (io/make-parents fixture-file))
    (pprint/pprint cmd-output (io/writer fixture-file))
    (println "Successfully recorded test!")

    {:fixture-file fixture-file
     :cmd-and-args cmd-and-args_}))

(def default-ns-format
  "(ns %s
  (:require [clojure.test :refer [deftest is]]
            [clojure.edn :as edn]
            [clojure.java.io :as io]
            [clojure.java.shell :as shell]))
")

(defn- record-and-add-test
  "Records output of cmd and args. Then adds a test to the given file and points it to
  the recorded fixture file."
  [args {:keys [test file] :as options}]
  (let [{:keys [fixture-file cmd-and-args]} (record-test args options)
        new-test-string (generate-test test
                                       (str/replace-first fixture-file "test/resources/" "")
                                       cmd-and-args)]
    (when-not (.exists (io/file file))
      (spit file
            (format default-ns-format (-> file
                                          (str/replace #"(^test/|\.clj$)" "")
                                          (str/replace "/" ".")
                                          (str/replace "_" "-"))))
      (println "Created test file!"))
    (spit file (str "\n" new-test-string) :append true)
    (println "Successfully added test!")))

(def cli-options
  [["-h" "--help"]
   ["-f" "--file FILE"]
   ["-v" "--verbose"]
   ["-t" "--test TEST"]])

(defn -main
  [{:keys [summary arguments options]}]
  (cond
    (or (:help options) (zero? (count arguments)))
    (util/print-summary " add|record &COMMAND-AND-ARGS" summary)

    (= "add" (first arguments))    (record-and-add-test (rest arguments) options)
    (= "record" (first arguments)) (do (record-test (rest arguments) options) nil)
    :else (util/error "Unknown subcommand given")))

(util/run-command -main *command-line-args* cli-options :in-order true :strict true)
