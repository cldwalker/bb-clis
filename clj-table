#!/usr/bin/env bb --verbose -I --stream
;; vim: set filetype=clojure:
;; Prints an ascii table given streamed in edn is a collection of maps

;; Copied from clojure.pprint which isn't fully available in babashka
(defn print-table
  "Prints a collection of maps in a textual table. Prints table headings
   ks, and then a line of output for each row, corresponding to the keys
   in ks. If ks are not specified, use the keys of the first item in rows."
  {:added "1.3"}
  ([ks rows]
     (when (seq rows)
       (let [widths (map
                     (fn [k]
                       (apply max (count (str k)) (map #(count (str (get % k))) rows)))
                     ks)
             spacers (map #(apply str (repeat % "-")) widths)
             fmts (map #(str "%" % "s") widths)
             fmt-row (fn [leader divider trailer row]
                       (str leader
                            (apply str (interpose divider
                                                  (for [[col fmt] (map vector (map #(get row %) ks) fmts)]
                                                    (format fmt (str col)))))
                            trailer))]
         (println)
         (println (fmt-row "| " " | " " |" (zipmap ks ks)))
         (println (fmt-row "|-" "-+-" "-|" (zipmap ks spacers)))
         (doseq [row rows]
           (println (fmt-row "| " " | " " |" row))))))
  ([rows] (print-table (keys (first rows)) rows)))

(if (and (coll? *input*) (-> *input* first map?))
  (let [rows *input*
       fields (distinct (mapcat identity (map keys rows)))]
   (print-table fields rows))
  (do
    (println "Error: Input is not an EDN collection of maps")
    (System/exit 1)))
